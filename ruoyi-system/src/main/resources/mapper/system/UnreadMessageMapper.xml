<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.UnreadMessageMapper">

    <resultMap type="UnreadMessage" id="UnreadMessageResult">
        <result property="messageId" column="message_id"/>
        <result property="userId" column="user_id"/>
        <result property="messageTitle" column="message_title"/>
        <result property="messageContent" column="message_content"/>
        <result property="messageType" column="message_type"/>
        <result property="isRead" column="is_read"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <sql id="selectUnreadMessageVo">
        select message_id, user_id, message_title, message_content, message_type, is_read, create_time, update_time
        from unread_message
    </sql>

    <select id="selectUnreadMessageList" parameterType="UnreadMessage" resultMap="UnreadMessageResult">
        <include refid="selectUnreadMessageVo"/>
        <where>
            <if test="userId != null and userId != 0">
                and user_id = #{userId}
            </if>
            <if test="messageType != null and messageType != ''">
                and message_type = #{messageType}
            </if>
            <if test="isRead != null and isRead != ''">
                and is_read = #{isRead}
            </if>
        </where>
        order by create_time desc
    </select>

    <select id="selectUnreadMessageById" parameterType="Long" resultMap="UnreadMessageResult">
        <include refid="selectUnreadMessageVo"/>
        where message_id = #{messageId}
    </select>

    <insert id="insertUnreadMessage" parameterType="UnreadMessage" useGeneratedKeys="true" keyProperty="messageId">
        insert into unread_message
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null and userId != 0">
                user_id,
            </if>
            <if test="messageTitle != null and messageTitle != ''">
                message_title,
            </if>
            <if test="messageContent != null and messageContent != ''">
                message_content,
            </if>
            <if test="messageType != null and messageType != ''">
                message_type,
            </if>
            <if test="isRead != null and isRead != ''">
                is_read,
            </if>
            create_time,
            update_time,
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null and userId != 0">
                #{userId},
            </if>
            <if test="messageTitle != null and messageTitle != ''">
                #{messageTitle},
            </if>
            <if test="messageContent != null and messageContent != ''">
                #{messageContent},
            </if>
            <if test="messageType != null and messageType != ''">
                #{messageType},
            </if>
            <if test="isRead != null and isRead != ''">
                #{isRead},
            </if>
            sysdate(),
            sysdate(),
        </trim>
    </insert>

    <update id="updateUnreadMessage" parameterType="UnreadMessage">
        update unread_message
        <set>
            <if test="userId != null and userId != 0">
                user_id = #{userId},
            </if>
            <if test="messageTitle != null and messageTitle != ''">
                message_title = #{messageTitle},
            </if>
            <if test="messageContent != null and messageContent != ''">
                message_content = #{messageContent},
            </if>
            <if test="messageType != null and messageType != ''">
                message_type = #{messageType},
            </if>
            <if test="isRead != null and isRead != ''">
                is_read = #{isRead},
            </if>
            update_time = sysdate(),
        </set>
        where message_id = #{messageId}
    </update>

    <delete id="deleteUnreadMessageById" parameterType="Long">
        delete from unread_message where message_id = #{messageId}
    </delete>

    <delete id="deleteUnreadMessageByIds" parameterType="Long">
        delete from unread_message where message_id in
        <foreach item="messageId" collection="array" open="(" separator="," close=")">
            #{messageId}
        </foreach>
    </delete>

</mapper>